#!/usr/bin/env nodeh

/*!
 * imager-cli
 * Copyright(c) 2014 Madhusudhan <me@madhums.me>
 * MIT Licensed
 */

/*!
 * Module dependencies.
 */

var program = require('commander');
var Imager = require('imager');
var fs = require('fs');
var co = require('co');
var pkg = require('../package.json');
var configFile = process.env.HOME + '/.imager.json';
var stringify = JSON.stringify;

function providers (val) {
  return ~['amazon', 'rackspace'].indexOf(val);
}

program
  .version(pkg.version)
  .option('-k, --key <key>', 'Key')
  .option('-s, --secret <secret>', 'Secret')
  .option('-c, --container <container>', 'Container')
  .option('-r, --region <region>', 'Region')
  .option('-p, --provider <provider>', 'Provider (one of amazon, rackspace)', providers);

program
  .command('upload <path>')
  .description('Upload the image at <path> to s3')
  .action(co(upload));

program
  .command('setup <key> <secret> <container> <provider> [region]')
  .description('Stores the imager config in ~/.imager.json')
  .action(co(storeInfo));

program
  .parse(process.argv);

/**
 * upload
 *
 * @param {String} filepath
 * @api private
 */

function *upload (filepath) {
  var _filepath = process.cwd() + '/' + filepath;
  var config = yield read(configFile);
  var uploaded;
  var imager;

  config = JSON.parse(config);
  config.key = program.key || config.key;
  config.keyId = program.secret || config.secret;
  config.container = program.container || config.container;
  config.region = program.region || config.region;
  config.provider = program.provider || config.provider;
  imager = new Imager(config);
  uploaded = yield _upload(_filepath, imager);
  console.log('Uploaded ' + stringify(uploaded));
}

/**
 * storeInfo
 *
 * @param {String} key
 * @param {String} secret
 * @param {String} container
 * @api private
 */

function *storeInfo (key, secret, container, provider, region) {
  var config = stringify({
    key: key,
    secret: secret,
    container: container,
    region: region,
    provider: provider
  });
  yield write(config);
  console.log('Wrote ' + config + ' to "' + configFile + '"\n');
}

/**
 * write
 *
 * @param {Object} config
 * @return {Function}
 * @api private
 */

function write (config) {
  return function (fn) {
    fs.writeFile(configFile, config, fn);
  };
}

/**
 * read
 *
 * @param {String} file
 * @return {Function}
 * @api private
 */

function read (file) {
  return function (fn) {
    fs.readFile(file, 'utf-8', fn);
  }
}

/**
 * upload
 *
 * @param {String} file
 * @return {Function}
 * @api private
 */

function _upload (file, imager) {
  return function (fn) {
    imager.upload(file, fn);
  }
}
